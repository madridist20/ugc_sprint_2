version: '3.5'

services:
  app:
    container_name: app
    build:
      context: ./ugc/src
    ports:
      - "8001:8001"
    env_file:
      - ./ugc/src/.env

    depends_on:
      - kafka
      - zookeeper
    networks:
      - ugc_network

  zookeeper:
    image: zookeeper:3.5
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - ugc_network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    hostname: kafka
    networks:
      - ugc_network
    ports:
      # To learn about configuring Kafka for access across networks see
      # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "views"

  mongodb_container:
    container_name: mongodb_container
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - ugc_network

  nginx:
    image: nginx:1.19.2
    volumes:
      - ./deploy/etc/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/etc/nginx/conf.d:/etc/nginx/conf.d:ro
      - /tmp/logs/nginx/:/var/log/nginx/
    depends_on:
      - app
    ports:
      - 80:80

  filebeat:
    build:
      context: filebeat
    container_name: filebeat
    volumes:
      - .ugc/src/logs/:/src/logs
      - /tmp/logs/nginx:/var/log/nginx:ro
    depends_on:
      - elasticsearch
      - kibana
      - nginx
      - logstash
      - app

volumes:
  mongodb_data_container:

networks:
  default:
    external:
      name: ugc_network
  ugc_network:
    driver: bridge
